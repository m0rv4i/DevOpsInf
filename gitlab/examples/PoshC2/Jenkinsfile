pipeline {

    agent {
        label 'Windows'
    }

    post {
        failure {
            updateGitlabCommitStatus name: 'build', state: 'failed'
        }
        success {
            updateGitlabCommitStatus name: 'build', state: 'success'
        }
    }

    options {
        gitLabConnection('Gitlab')
    }

    triggers {
        gitlab(triggerOnPush: true, triggerOnMergeRequest: true, branchFilterType: 'All')
    }

    stages {

        stage('build') {
            steps {
                echo "No build step for ${JOB_NAME}"
            }
        }
        stage('test') {
            steps {
                bat "python -m pytest"
            }
        }

        stage('sonar') {
            steps {
                withSonarQubeEnv('Sonarqube') {
                    bat "docker run --rm -e SONAR_HOST_URL=\"${env.SONAR_HOST_URL}\" -v \"%cd%:/usr/src\" sonarsource/sonar-scanner-cli:latest -Dsonar.projectKey=${JOB_NAME}"
                }
            }
        }

        stage('deploy') {

            steps{

                script {

                    zip zipFile: '${JOB_NAME}.zip'

                    def server = Artifactory.server "ARTIFACTORY"

                    String rtProject = ""

                    if(env.RT_PROJECT){
                        rtProject = env.RT_PROJECT
                    } else {
                        rtProject = "No Project"
                    }

                    def uploadSpec =
                        '''{
                                "files": [
                                    {
                                        "pattern": "${JOB_NAME}.zip",
                                        "target": "engagements/''' + rtProject + '''/${JOB_NAME}/"
                                    }
                                ]
                            }'''

                    def buildInfo = server.upload spec: uploadSpec

                    server.publishBuildInfo buildInfo
                }
            }

        }

    }

}
