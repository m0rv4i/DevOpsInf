library identifier: 'rt-ci-common@master',
    retriever: modernSCM(
        [
            $class: 'GitSCMSource',
            remote: 'https://github.com/m0rv4i/RT-Jenkins-Piplines-Common.git'
        ]
    )


pipeline {

    agent {
        label 'Windows'
    }

    post {
        success {
            updateGitlabCommitStatus name: 'build', state: 'success'
            slackNotifyDeployed()
        }
        failure {
            updateGitlabCommitStatus name: 'build', state: 'failed'
            slackNotifyPipelineFailed()
        }
        cleanup {
            cleanup()
        }
    }

    options {
        timestamps()

        buildDiscarder(logRotator(numToKeepStr: '5'))

        gitLabConnection('Gitlab')
    }

    triggers {
        gitlab(triggerOnPush: true, triggerOnMergeRequest: true, branchFilterType: 'All', secretToken: "QHeyKgD3lw9qU5wTwp7K6AmA3aFZO0") // TODO don't store here
    }

    parameters {
        string name: 'projectId', defaultValue: 'No Project', description: 'projectId associated with the build.', trim: true
        file description: 'Payload contents', name: 'payload.txt'
    }

    stages {

        stage('build') {
            steps {
                script {
                    def payload = readFile "${env.WORKSPACE}/payload.txt"
                    replaceAll("*.macro", "#REPLACEME#", "${payload}")
                }
            }
        }

        stage('scan') {
            steps {
                offlineVirusScan("dropper.macro")
            }
        }

        stage('deploy') {
            steps{
                script{
                    def uploadPattern = "dropper.macro"
                    def targetRepo = "engagements/${params.projectId}/${JOB_NAME}/"
                    def props = "language=vba;ext=macro;type=internal;stage=exploitation"

                    deployToRtArtifactory(uploadPattern, targetRepo)
                }
            }
        }

    }

}
